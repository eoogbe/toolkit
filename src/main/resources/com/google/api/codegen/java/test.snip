@extends "java/common.snip"
@extends "java/initcode.snip"

@snippet generate(xapiTest)
  {@renderFileHeader(xapiTest.fileHeader)}

  @@javax.annotation.Generated("by GAPIC")
  public class {@xapiTest.testClass.name} {
    @join mockService : xapiTest.testClass.mockServices
      private static {@mockService.className} {@mockService.varName};
    @end
    private static MockServiceHelper serviceHelper;
    private {@xapiTest.testClass.apiClassName} client;

    @@BeforeClass
    public static void startStaticServer() {
      @join mockService : xapiTest.testClass.mockServices
        {@mockService.varName} = new {@mockService.className}();
      @end
      serviceHelper = new MockServiceHelper("in-process-1", Arrays.<MockGrpcService>asList({@mockServiceArgs(xapiTest.testClass.mockServices)}));
      serviceHelper.start();
    }

    @@AfterClass
    public static void stopServer() {
      serviceHelper.stop();
    }

    @@Before
    public void setUp() throws IOException {
      serviceHelper.reset();
      {@xapiTest.testClass.apiSettingsClassName} settings = {@xapiTest.testClass.apiSettingsClassName}.newBuilder()
          .setTransportChannelProvider(serviceHelper.createChannelProvider())
          .setCredentialsProvider(NoCredentialsProvider.create())
          .build();
      client = {@xapiTest.testClass.apiClassName}.create(settings);
    }

    @@After
    public void tearDown() throws Exception {
      client.close();
    }

    @join test : xapiTest.testClass.testCases
      {@testCase(test)}

    @end
  }
@end

@private mockServiceArgs(mockServices)
  @join mockService : mockServices on ", "
    {@mockService.varName}
  @end
@end

@private testCase(test)
  @switch test.apiMethod.grpcStreamingType
  @case "BidiStreaming"
      {@grpcStreamingTestCase(test)}
  @case "ServerStreaming"
      {@grpcStreamingTestCase(test)}
  @case "ClientStreaming"
      {@grpcStreamingTestCase(test)}
  @case "NonStreaming"
      @switch test.apiMethod.type
      @case "FlattenedMethod"
          {@unaryTestCase(test)}
      @case "PagedFlattenedMethod"
          {@unaryTestCase(test)}
      @case "AsyncOperationFlattenedMethod"
          {@longRunningMethodTestCase(test)}
      @end
  @end
@end

@private unaryTestCase(test)
  @@Test
  @@SuppressWarnings("all")
  public void {@test.name}() {
    {@addResponse(test)}

    {@initCode(test.apiMethod.initCode)}

    {@methodCall(test)}

    {@unarySuccessAsserts(test)}
  }

  @@Test
  @@SuppressWarnings("all")
  public void {@test.nameWithException}() throws Exception {
    {@addException(test)}

    try {
      {@initCode(test.apiMethod.initCode)}

      client.{@test.apiMethod.name}(\
          {@sampleMethodCallArgList(test.apiMethod.initCode.fieldSettings)});
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }
@end

@private grpcStreamingTestCase(test)
  @@Test
  @@SuppressWarnings("all")
  public void {@test.name}() throws Exception {
    {@addResponse(test)}
    {@initCode(test.apiMethod.initCode)}

    {@streamingMethodCall(test.apiMethod)}

    List<{@test.apiMethod.responseTypeName}> actualResponses = responseObserver.future().get();
    Assert.assertEquals(1, actualResponses.size());
    Assert.assertEquals(expectedResponse, actualResponses.get(0));
  }

  @@Test
  @@SuppressWarnings("all")
  public void {@test.nameWithException}() throws Exception {
    {@addException(test)}
    {@initCode(test.apiMethod.initCode)}

    {@streamingMethodCallWithException(test.apiMethod)}

    try {
      List<{@test.apiMethod.responseTypeName}> actualResponses = responseObserver.future().get();
      Assert.fail("No exception thrown");
    } catch (ExecutionException e) {
      Assert.assertTrue(e.getCause() instanceof StatusRuntimeException);
      StatusRuntimeException statusException = (StatusRuntimeException) e.getCause();
      Assert.assertEquals(Status.INVALID_ARGUMENT, statusException.getStatus());
    }
  }
@end

@private longRunningMethodTestCase(test)
  @@Test
  @@SuppressWarnings("all")
  public void {@test.name}() throws Exception {
    {@initCode(test.mockResponse.initCode)}
    Operation resultOperation =
        Operation.newBuilder()
            .setName("{@test.name}")
            .setDone(true)
            .setResponse(Any.pack(expectedResponse))
            .build();
    {@test.mockServiceVarName}.addResponse(resultOperation);

    {@initCode(test.apiMethod.initCode)}

    {@longRunningMethodCall(test.apiMethod)}

    {@unarySuccessAsserts(test)}
  }

  @@Test
  @@SuppressWarnings("all")
  public void {@test.nameWithException}() throws Exception {
    {@addException(test)}

    try {
      {@initCode(test.apiMethod.initCode)}

      client.{@test.apiMethod.name}(\
          {@sampleMethodCallArgList(test.apiMethod.initCode.fieldSettings)}).get();
      Assert.fail("No exception raised");
    } catch (ExecutionException e) {
      Assert.assertEquals(InvalidArgumentException.class, e.getCause().getClass());
      InvalidArgumentException apiException = (InvalidArgumentException) e.getCause();
      Assert.assertEquals(StatusCode.Code.INVALID_ARGUMENT, apiException.getStatusCode().getCode());
    }
  }

@end

@private streamingMethodCall(apiMethod)
  @switch apiMethod.grpcStreamingType
  @case "BidiStreaming"
    {@bidiStreamingCall(apiMethod)}
    requestObserver.onCompleted();
  @case "ServerStreaming"
    {@serverStreamingCall(apiMethod)}
  @default
    $unhandled case: {@apiMethod.grpcStreamingType}$
  @end
@end

@private streamingMethodCallWithException(apiMethod)
  @switch apiMethod.grpcStreamingType
  @case "BidiStreaming"
    {@bidiStreamingCall(apiMethod)}
  @case "ServerStreaming"
    {@serverStreamingCall(apiMethod)}
  @default
    $unhandled case: {@apiMethod.grpcStreamingType}$
  @end
@end

@private bidiStreamingCall(apiMethod)
  MockStreamObserver<{@apiMethod.responseTypeName}> responseObserver = new MockStreamObserver<>();

  BidiStreamingCallable<{@apiMethod.serviceRequestTypeName}, {@apiMethod.responseTypeName}> callable =
      client.{@apiMethod.name}();
  ApiStreamObserver<{@apiMethod.serviceRequestTypeName}> requestObserver =
      callable.bidiStreamingCall(responseObserver);

  requestObserver.onNext(request);
@end

@private serverStreamingCall(apiMethod)
  MockStreamObserver<{@apiMethod.responseTypeName}> responseObserver = new MockStreamObserver<>();

  ServerStreamingCallable<{@apiMethod.serviceRequestTypeName}, {@apiMethod.responseTypeName}> callable =
      client.{@apiMethod.name}();
  callable.serverStreamingCall(request, responseObserver);
@end

@private addResponse(test)
  {@initCode(test.mockResponse.initCode)}
  {@test.mockServiceVarName}.addResponse(expectedResponse);
@end

@private addException(test)
  StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
  {@test.mockServiceVarName}.addException(exception);
@end

@private methodCall(test)
  @switch test.apiMethod.type
  @case "PagedFlattenedMethod"
    {@test.apiMethod.responseTypeName} pagedListResponse = client.{@test.apiMethod.name}(\
      {@sampleMethodCallArgList(test.apiMethod.initCode.fieldSettings)});

    @join pageStreamingResponseView : test.pageStreamingResponseViews
      List<{@pageStreamingResponseView.resourceTypeName}> {@pageStreamingResponseView.resourcesVarName} = Lists.newArrayList(pagedListResponse.{@pageStreamingResponseView.resourcesIterateMethod}());
      Assert.assertEquals(1, {@pageStreamingResponseView.resourcesVarName}.size());
      Assert.assertEquals(expectedResponse.{@pageStreamingResponseView.resourcesFieldGetterName}().get(0), {@pageStreamingResponseView.resourcesVarName}.get(0));
    @end
  @case "FlattenedMethod"
    @if test.apiMethod.hasReturnValue
      {@test.apiMethod.responseTypeName} actualResponse =
          client.{@test.apiMethod.name}(\
          {@sampleMethodCallArgList(test.apiMethod.initCode.fieldSettings)});
      Assert.assertEquals(expectedResponse, actualResponse);
    @else
      client.{@test.apiMethod.name}(\
            {@sampleMethodCallArgList(test.apiMethod.initCode.fieldSettings)});
    @end
  @default
    $unhandledCase: {@test.apiMethod.type}$
  @end
@end

@private longRunningMethodCall(apiMethod)
  {@apiMethod.responseTypeName} actualResponse =
      client.{@apiMethod.name}(\
          {@sampleMethodCallArgList(apiMethod.initCode.fieldSettings)}).get();
  Assert.assertEquals(expectedResponse, actualResponse);
@end

@private unarySuccessAsserts(test)
  List<GeneratedMessageV3> actualRequests = {@test.mockServiceVarName}.getRequests();
  Assert.assertEquals(1, actualRequests.size());
  {@test.apiMethod.serviceRequestTypeName} actualRequest = ({@test.apiMethod.serviceRequestTypeName})actualRequests.get(0);

  @join assert : test.asserts
    @if assert.hasExpectedValueTransformFunction
      @if assert.hasActualValueTransformFunction
        Assert.assertEquals({@assert.expectedValueTransformFunction}(\
          {@assert.expectedValueIdentifier}), \
          {@assert.actualValueTransformFunction}(actualRequest.{@assert.actualValueGetter}()));
      @else
        Assert.assertEquals({@assert.expectedValueTransformFunction}(\
          {@assert.expectedValueIdentifier}), \
          actualRequest.{@assert.actualValueGetter}());
      @end
    @else
      @if assert.hasActualValueTransformFunction
        "$ NOT IMPLEMENTED: hasActualValueTransformFunction == true while hasExpectedValueTransformFunction == false $";
      @else
        Assert.assertEquals({@assert.expectedValueIdentifier}, \
          actualRequest.{@assert.actualValueGetter}());
      @end
    @end
  @end
@end

@private sampleMethodCallArgList(fieldSettings)
  @join fieldSetting : fieldSettings on ", "
    {@fieldSetting.identifier}
  @end
@end
