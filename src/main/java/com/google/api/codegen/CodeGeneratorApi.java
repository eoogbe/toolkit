/* Copyright 2016 Google Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.api.codegen;

import com.google.api.codegen.config.GapicProductConfig;
import com.google.api.codegen.config.PackageMetadataConfig;
import com.google.api.codegen.configgen.Adviser;
import com.google.api.codegen.configgen.MessageGenerator;
import com.google.api.codegen.configgen.mergers.ConfigMerger;
import com.google.api.codegen.configgen.nodes.ConfigNode;
import com.google.api.codegen.gapic.GapicGeneratorConfig;
import com.google.api.codegen.gapic.GapicProvider;
import com.google.api.codegen.gapic.GapicProviderFactory;
import com.google.api.codegen.util.ClassInstantiator;
import com.google.api.tools.framework.model.Diag;
import com.google.api.tools.framework.model.Model;
import com.google.api.tools.framework.model.SimpleLocation;
import com.google.api.tools.framework.model.stages.Merged;
import com.google.api.tools.framework.snippet.Doc;
import com.google.api.tools.framework.tools.ToolDriverBase;
import com.google.api.tools.framework.tools.ToolOptions;
import com.google.api.tools.framework.tools.ToolOptions.Option;
import com.google.api.tools.framework.tools.ToolUtil;
import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Strings;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Maps;
import com.google.inject.TypeLiteral;
import com.google.protobuf.ExtensionRegistry;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.Map;

/** Main class for the code generator. */
public class CodeGeneratorApi extends ToolDriverBase {
  public static final Option<String> OUTPUT_FILE =
      ToolOptions.createOption(
          String.class,
          "output_file",
          "The name of the output file or folder to put generated code.",
          "");

  public static final Option<String> GENERATOR_CONFIG_FILE =
      ToolOptions.createOption(
          new TypeLiteral<String>() {},
          "config_file",
          "The YAML configuration file for the code generator.",
          "");

  public static final Option<String> PACKAGE_CONFIG_FILE =
      ToolOptions.createOption(
          String.class, "package_config", "The package metadata configuration.", "");

  public static final Option<List<String>> ENABLED_ARTIFACTS =
      ToolOptions.createOption(
          new TypeLiteral<List<String>>() {},
          "enabled_artifacts",
          "The artifacts to be generated by the code generator.",
          ImmutableList.<String>of());

  public static final Option<List<String>> ADVICE_SUPPRESSORS =
      ToolOptions.createOption(
          new TypeLiteral<List<String>>() {},
          "supress_warning",
          "Names of adviser rules to suppress warnings for.",
          ImmutableList.<String>of());

  /** Constructs a code generator api based on given options. */
  public CodeGeneratorApi(ToolOptions options) {
    super(options);
  }

  @Override
  public ExtensionRegistry getPlatformExtensions() {
    ExtensionRegistry extensionRegistry = super.getPlatformExtensions();
    return extensionRegistry;
  }

  @Override
  protected void process() throws Exception {
    String configFileName = options.get(GENERATOR_CONFIG_FILE);
    File configFile = ToolUtil.findDataFile(configFileName, model.getDataPath());
    if (configFile == null) {
      error("Cannot find configuration file.");
      return;
    }

    model.establishStage(Merged.KEY);

    ConfigNode configNode = new ConfigMerger().mergeConfig(model, configFile);
    if (configNode == null) {
      return;
    }

    List<String> adviceSuppressors = options.get(ADVICE_SUPPRESSORS);
    Adviser adviser = new Adviser(adviceSuppressors);
    adviser.advise(model.getDiagCollector(), configNode);

    if (model.getDiagCollector().getErrorCount() > 0) {
      for (Diag diag : model.getDiagCollector().getDiags()) {
        System.err.println(diag.toString());
      }
      return;
    }

    MessageGenerator messageGenerator = new MessageGenerator(ConfigProto.newBuilder());
    messageGenerator.visit(configNode.getChild());
    ConfigProto configProto = (ConfigProto) messageGenerator.toMessage();
    if (configProto == null) {
      return;
    }

    PackageMetadataConfig packageConfig = null;
    if (!Strings.isNullOrEmpty(options.get(PACKAGE_CONFIG_FILE))) {
      String contents =
          new String(
              Files.readAllBytes(Paths.get(options.get(PACKAGE_CONFIG_FILE))),
              StandardCharsets.UTF_8);
      packageConfig = PackageMetadataConfig.createFromString(contents);
    }
    GeneratorProto generator = configProto.getGenerator();
    GapicProductConfig productConfig = GapicProductConfig.create(model, configProto);

    if (productConfig == null) {
      return;
    }
    if (generator != null) {
      String factory = generator.getFactory();
      String id = generator.getId();

      GapicProviderFactory<GapicProvider<? extends Object>> providerFactory =
          createProviderFactory(model, factory);
      GapicGeneratorConfig generatorConfig =
          GapicGeneratorConfig.newBuilder()
              .id(id)
              .enabledArtifacts(options.get(ENABLED_ARTIFACTS))
              .build();

      String outputPath = options.get(OUTPUT_FILE);
      List<GapicProvider<? extends Object>> providers =
          providerFactory.create(model, productConfig, generatorConfig, packageConfig, outputPath);
      Map<String, Doc> outputFiles = Maps.newHashMap();
      for (GapicProvider<? extends Object> provider : providers) {
        outputFiles.putAll(provider.generate());
      }
      writeCodeGenOutput(outputFiles, outputPath);
    }
  }

  @VisibleForTesting
  public static void writeCodeGenOutput(Map<String, Doc> outputFiles, String outputFile)
      throws IOException {
    // TODO: Support zip output.
    if (outputFile.endsWith(".jar")) {
      ToolUtil.writeJar(outputFiles, outputFile);
    } else {
      ToolUtil.writeFiles(outputFiles, outputFile);
    }
  }

  private static GapicProviderFactory<GapicProvider<? extends Object>> createProviderFactory(
      final Model model, String factory) {
    @SuppressWarnings("unchecked")
    GapicProviderFactory<GapicProvider<? extends Object>> provider =
        ClassInstantiator.createClass(
            factory,
            GapicProviderFactory.class,
            new Class<?>[] {},
            new Object[] {},
            "generator",
            new ClassInstantiator.ErrorReporter() {
              @Override
              public void error(String message, Object... args) {
                model
                    .getDiagCollector()
                    .addDiag(Diag.error(SimpleLocation.TOPLEVEL, message, args));
              }
            });
    return provider;
  }

  private void error(String message, Object... args) {
    model.getDiagCollector().addDiag(Diag.error(SimpleLocation.TOPLEVEL, message, args));
  }
}
